// Copyright (C) 2018-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#pragma once

#include <string>

#include <vpu/vpu_config.hpp>

namespace InferenceEngine {

//
// Compilation options
//

DECLARE_MYRIAD_CONFIG_KEY(NUMBER_OF_SHAVES);
DECLARE_MYRIAD_CONFIG_KEY(NUMBER_OF_CMX_SLICES);
DECLARE_MYRIAD_CONFIG_KEY(TILING_CMX_LIMIT_KB);

DECLARE_MYRIAD_CONFIG_KEY(TENSOR_STRIDES);

DECLARE_MYRIAD_CONFIG_KEY(IR_WITH_SCALES_DIRECTORY);
DECLARE_MYRIAD_CONFIG_KEY(DETECT_NETWORK_BATCH);
DECLARE_MYRIAD_CONFIG_KEY(COPY_OPTIMIZATION);
DECLARE_MYRIAD_CONFIG_KEY(HW_INJECT_STAGES);
DECLARE_MYRIAD_CONFIG_KEY(HW_POOL_CONV_MERGE);
DECLARE_MYRIAD_CONFIG_KEY(PACK_DATA_IN_CMX);
DECLARE_MYRIAD_CONFIG_KEY(HW_DILATION);
DECLARE_MYRIAD_CONFIG_KEY(HW_EXTRA_SPLIT);
DECLARE_MYRIAD_CONFIG_KEY(FORCE_DEPRECATED_CNN_CONVERSION);

DECLARE_MYRIAD_CONFIG_KEY(PERF_REPORT_MODE);
DECLARE_MYRIAD_CONFIG_VALUE(PER_LAYER);
DECLARE_MYRIAD_CONFIG_VALUE(PER_STAGE);

//
// Debug options
//

DECLARE_MYRIAD_CONFIG_KEY(HW_WHITE_LIST);
DECLARE_MYRIAD_CONFIG_KEY(HW_BLACK_LIST);

DECLARE_MYRIAD_CONFIG_KEY(NONE_LAYERS);
DECLARE_MYRIAD_CONFIG_KEY(IGNORE_UNKNOWN_LAYERS);

DECLARE_MYRIAD_CONFIG_KEY(COMPILER_LOG_FILE_PATH);

DECLARE_MYRIAD_CONFIG_KEY(DUMP_INTERNAL_GRAPH_FILE_NAME);
DECLARE_MYRIAD_CONFIG_KEY(DUMP_INTERNAL_GRAPH_DIRECTORY);
DECLARE_MYRIAD_CONFIG_KEY(DUMP_ALL_PASSES);

/**
 * @brief Used to disable reorder passes in tests to be able to precisely set
 * desired layout on every stage.
 */
DECLARE_MYRIAD_CONFIG_KEY(DISABLE_REORDER);

/**
 * @brief Used to disable convert stages in tests to be able to insert
 * convert layer with desired precision.
 */
DECLARE_MYRIAD_CONFIG_KEY(DISABLE_CONVERT_STAGES);

/**
 * @brief Used to disable permute merging pass (with setting "NO") in tests to check it preserves behaviour. Default = "YES"
 */
DECLARE_MYRIAD_CONFIG_KEY(ENABLE_PERMUTE_MERGING);

DECLARE_MYRIAD_CONFIG_KEY(ENABLE_REPL_WITH_SCRELU);

DECLARE_MYRIAD_CONFIG_KEY(ENABLE_REPLACE_WITH_REDUCE_MEAN);

/**
 * @brief Used to enable Tensor Iterator unrolling to get a reference for Tensor Iterator per-layer tests.
 * Default is "NO".
 */
DECLARE_MYRIAD_CONFIG_KEY(ENABLE_TENSOR_ITERATOR_UNROLLING);

/**
 * @brief Used to guarantee Tensor Iterator layer will remain in the network regardless of possible performance transformation.
 * Example of transformation: combining to RNN sequence. Needed for Tensor Iterator per-layer tests.
 * Default is "NO".
 */
DECLARE_MYRIAD_CONFIG_KEY(FORCE_PURE_TENSOR_ITERATOR);

//
// Myriad plugin options
//

DECLARE_MYRIAD_CONFIG_KEY(POWER_MANAGEMENT);
DECLARE_MYRIAD_CONFIG_VALUE(POWER_FULL);
DECLARE_MYRIAD_CONFIG_VALUE(POWER_INFER);
DECLARE_MYRIAD_CONFIG_VALUE(POWER_STAGE);
DECLARE_MYRIAD_CONFIG_VALUE(POWER_STAGE_SHAVES);
DECLARE_MYRIAD_CONFIG_VALUE(POWER_STAGE_NCES);

DECLARE_MYRIAD_CONFIG_KEY(WATCHDOG);

DECLARE_MYRIAD_CONFIG_KEY(PLUGIN_LOG_FILE_PATH);

DECLARE_MYRIAD_CONFIG_KEY(DEVICE_CONNECT_TIMEOUT);

}  // namespace InferenceEngine
